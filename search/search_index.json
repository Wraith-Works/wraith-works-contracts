{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":"<p>Wraith Works contracts are a set of Solidity smart contracts to help streamline the development process for commonly used patterns, as well as providing other innovative ideas that can be adopted by the community.</p>"},{"location":"#installation","title":"Installation","text":"<p>Our contracts are deployed to npmjs, and the following commands can be used to install in your project.</p> <p>Npm</p> <pre><code>npm i @wraith-works/contracts\n</code></pre> <p>Yarn</p> <pre><code>yarn add @wraith-works/contracts\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>Utilizing the contracts in your project is simple:</p> <pre><code>import \"@wraith-works/contracts/tokens/ERC721/BaseERC721.sol\";\n</code></pre>"},{"location":"#example-contract","title":"Example Contract","text":"<pre><code>pragma solidity ^0.8.19;\n\nimport \"@wraith-works/contracts/tokens/ERC721/AirdropERC721.sol\";\nimport \"@wraith-works/contracts/tokens/ERC721/RevealableERC721.sol\";\n\ncontract MyNFT is AirdropERC721, RevealableERC721 {\n    constructor()\n        BaseERC721(\n            \"MyNFT\",\n            \"NFT\",\n            \"https://example.com/\",\n            \".json\",\n            3333,\n            0x14c84F8aBaD55F074Ef18BEb46A7cbede6a17B10,\n            750\n        )\n        AutoIncrementERC721(1)\n        RevealableERC721(\"https://example.com/prereveal.json\")\n    {}\n\n    function tokenURI(uint256 _tokenId) public view override(BaseERC721, RevealableERC721) returns (string memory) {\n        return RevealableERC721.tokenURI(_tokenId);\n    }\n}\n</code></pre>"},{"location":"#testing","title":"Testing","text":"<p>Each contract has an associated test case in <code>test/</code>. Follow these steps to run the tests:</p> <ol> <li>Install dependencies with <code>yarn install</code>.</li> <li>Run the tests with <code>yarn test</code>.</li> </ol>"},{"location":"#example-output","title":"Example Output","text":"<pre><code>BaseERC721 airdrop contract test\n  \u2713 BaseERC721 airdrop security checks\n  \u2713 Can airdrop total supply\n\nBaseERC721 contract test\n  \u2713 Deployment should succeed\n  \u2713 Deployment with max supply should succeed\n  \u2713 BaseERC721 security checks\n  \u2713 Can pause and unpause contract\n  \u2713 Mint fails when paused\n  \u2713 Unlimited mint more than one\n  \u2713 Max supply mint more than one\n  \u2713 Max supply mint total supply\n  \u2713 Correct tokenURI\n\nBaseERC721 revealable contract test\n  \u2713 Deployment should succeed\n  \u2713 BaseERC721 revealable security checks\n  \u2713 tokenURI returns prereveal URI\n  \u2713 tokenURI returns URI for token when revealed\n\n\u00b7--------------------------------------------|---------------------------|-------------|-----------------------------\u00b7\n|            Solc version: 0.8.19            \u00b7  Optimizer enabled: true  \u00b7  Runs: 200  \u00b7  Block limit: 10000000 gas  \u2502\n\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n|  Methods                                   \u00b7              175 gwei/gas               \u00b7       0.84 usd/matic        \u2502\n\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n|  Contract              \u00b7  Method           \u00b7  Min        \u00b7  Max        \u00b7  Avg        \u00b7  # calls      \u00b7  usd (avg)  \u2502\n\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n|  AirdropERC721Mock     \u00b7  airdrop          \u00b7    3840483  \u00b7    3846083  \u00b7    3846028  \u00b7          101  \u00b7       0.57  \u2502\n\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n|  AirdropERC721Mock     \u00b7  unpause          \u00b7          -  \u00b7          -  \u00b7      27773  \u00b7            2  \u00b7       0.00  \u2502\n\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n|  ERC721Mock            \u00b7  mint             \u00b7     608674  \u00b7    3841655  \u00b7    3748345  \u00b7          104  \u00b7       0.55  \u2502\n\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n|  ERC721Mock            \u00b7  pause            \u00b7          -  \u00b7          -  \u00b7      27757  \u00b7            1  \u00b7       0.00  \u2502\n\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n|  ERC721Mock            \u00b7  setBaseURI       \u00b7          -  \u00b7          -  \u00b7      31226  \u00b7            1  \u00b7       0.00  \u2502\n\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n|  ERC721Mock            \u00b7  unpause          \u00b7          -  \u00b7          -  \u00b7      27773  \u00b7            5  \u00b7       0.00  \u2502\n\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n|  RevealableERC721Mock  \u00b7  mint             \u00b7          -  \u00b7          -  \u00b7     147925  \u00b7            1  \u00b7       0.02  \u2502\n\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n|  RevealableERC721Mock  \u00b7  setPrerevealURI  \u00b7          -  \u00b7          -  \u00b7      40758  \u00b7            1  \u00b7       0.01  \u2502\n\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n|  RevealableERC721Mock  \u00b7  toggleReveal     \u00b7          -  \u00b7          -  \u00b7      45643  \u00b7            1  \u00b7       0.01  \u2502\n\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n|  RevealableERC721Mock  \u00b7  unpause          \u00b7          -  \u00b7          -  \u00b7      27773  \u00b7            1  \u00b7       0.00  \u2502\n\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n|  Deployments                               \u00b7                                         \u00b7  % of limit   \u00b7             \u2502\n\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n|  AirdropERC721Mock                         \u00b7          -  \u00b7          -  \u00b7    2254114  \u00b7       22.5 %  \u00b7       0.33  \u2502\n\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n|  ERC721Mock                                \u00b7    2192295  \u00b7    2192319  \u00b7    2192317  \u00b7       21.9 %  \u00b7       0.32  \u2502\n\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7|\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n|  RevealableERC721Mock                      \u00b7          -  \u00b7          -  \u00b7    2350328  \u00b7       23.5 %  \u00b7       0.35  \u2502\n\u00b7--------------------------------------------|-------------|-------------|-------------|---------------|-------------\u00b7\n\n15 passing (2m)\n</code></pre>"},{"location":"tokens/ERC20/BaseERC20/","title":"BaseERC20","text":"<pre><code>import \"@wraith-works/contracts/tokens/ERC20/BaseERC20.sol\";\n</code></pre> <p>The <code>BaseERC20</code> contract extends the basic <code>ERC20</code> contract with ownership, pausability, and authorized minting capabilities.</p> <p>View Contract </p>"},{"location":"tokens/ERC20/BaseERC20/#implementation","title":"Implementation","text":"<p>The <code>BaseERC20</code> contract requires the following variables to be passed into the constructor:</p> Name Type Description <code>_name</code> <code>string memory</code> Name of the token. <code>_symbol</code> <code>string memory</code> Symbol for the token."},{"location":"tokens/ERC20/BaseERC20/#usage","title":"Usage","text":"pause <pre><code>function pause() external onlyOwner\n</code></pre> <ul> <li>Pause the contract, and disable token transfers.</li> </ul> unpause <pre><code>function unpause() external onlyOwner\n</code></pre> <ul> <li>Unpause the contract, and allow token transfers.</li> </ul> setAuthorizedMinter <pre><code>function setAuthorizedMinter(address _minter, bool _authorized) external onlyOwner\n</code></pre> <ul> <li>Add or remove an authorized minter.</li> <li><code>_minter</code>: The address of the authorized minter.</li> <li><code>_authorized</code>: Whether to add or remove as authorized.</li> </ul> authorizedMint <pre><code>function authorizedMint(address _account, uint256 _amount) external onlyAuthorizedMinter\n</code></pre> <ul> <li>An authorized only mint to the provided account for the given amount.</li> <li><code>_account</code>: Account to mint to.</li> <li><code>_amount</code>: Amount to mint.</li> </ul>"},{"location":"tokens/ERC20/BaseERC20/#example","title":"Example","text":"<pre><code>pragma solidity ^0.8.19;\n\nimport \"@wraith-works/contracts/tokens/ERC20/BaseERC20.sol\";\n\ncontract MyToken is BaseERC20 {\n    constructor() BaseERC20(\"MyToken\", \"MYTKN\") {}\n}\n</code></pre>"},{"location":"tokens/ERC721/AirdropERC721/","title":"AirdropERC721","text":"<pre><code>import \"@wraith-works/contracts/tokens/ERC721/AirdropERC721.sol\";\n</code></pre> <p>The <code>AirdropERC721</code> contract provides airdrop functionality to the AutoIncrementERC721 contract.</p> <p>View Contract </p>"},{"location":"tokens/ERC721/AirdropERC721/#implementation","title":"Implementation","text":"<p>The <code>AirdropERC721</code> contract does not have any additional requirements except what is already outlined in AutoIncrementERC721.</p>"},{"location":"tokens/ERC721/AirdropERC721/#inherits-from","title":"Inherits From","text":"<ul> <li>AutoIncrementERC721</li> </ul>"},{"location":"tokens/ERC721/AirdropERC721/#usage","title":"Usage","text":"airdrop <pre><code>function airdrop(address[] calldata _to, uint256[] calldata _amounts) public onlyOwner\n</code></pre> <ul> <li>Airdrop (mint) tokens to each address in <code>_to</code>, for the matching amount in <code>_amounts</code>.</li> <li><code>_to</code>: Array of addresses to mint to.</li> <li><code>_amounts</code>: Array of amounts to mint for each address.</li> </ul>"},{"location":"tokens/ERC721/AirdropERC721/#example","title":"Example","text":"<pre><code>pragma solidity ^0.8.19;\n\nimport \"@wraith-works/contracts/tokens/ERC721/AirdropERC721.sol\";\n\ncontract MyAirdrop is AirDropERC721 {\n    constructor()\n        BaseERC721(\n            \"MyAirdrop\",\n            \"AIRDROP\",\n            \"https://example.com/\",\n            \".json\",\n            3333,\n            0x14c84F8aBaD55F074Ef18BEb46A7cbede6a17B10,\n            750\n        )\n        AutoIncrementERC721(1)\n    {}\n}\n</code></pre>"},{"location":"tokens/ERC721/AutoIncrementERC721/","title":"AutoIncrementERC721","text":"<pre><code>import \"@wraith-works/contracts/tokens/ERC721/AutoIncrementERC721.sol\";\n</code></pre> <p>The <code>AutoIncrementERC721</code> contract provides auto incrementing functionality to the BaseERC721 contract.</p> <p>View Contract </p>"},{"location":"tokens/ERC721/AutoIncrementERC721/#implementation","title":"Implementation","text":"<p>The <code>AutoIncrementERC721</code> contract requires the following variables to be passed into the constructor:</p> Name Type Description <code>_startingIndex</code> <code>uint256</code> The index to start at for the token Ids."},{"location":"tokens/ERC721/AutoIncrementERC721/#inherits-from","title":"Inherits From","text":"<ul> <li>BaseERC721</li> </ul>"},{"location":"tokens/ERC721/AutoIncrementERC721/#usage","title":"Usage","text":"_autoIncrementMint <pre><code>function _autoIncrementMint(address _to, uint256 _amount) internal\n</code></pre> <ul> <li>Auto incrementing mint function. Token ID will increment for each internal mint call.</li> <li><code>_to</code>: The address to mint to.</li> <li><code>_amount</code>: The amount to mint out.</li> </ul>"},{"location":"tokens/ERC721/AutoIncrementERC721/#example","title":"Example","text":"<pre><code>pragma solidity ^0.8.19;\n\nimport \"@wraith-works/contracts/tokens/ERC721/AutoIncrementERC721.sol\";\n\ncontract MyNFT is AutoIncrementERC721 {\n    constructor()\n        BaseERC721(\n            \"MyNFT\",\n            \"NFT\",\n            \"https://example.com/\",\n            \".json\",\n            3333,\n            0x14c84F8aBaD55F074Ef18BEb46A7cbede6a17B10,\n            750\n        )\n        AutoIncrementERC721(1)\n    {}\n\n    function mint(uint256 _amount) external {\n        _autoIncrementMint(msg.sender, _amount);\n    }\n}\n</code></pre>"},{"location":"tokens/ERC721/BaseERC721/","title":"BaseERC721","text":"<pre><code>import \"@wraith-works/contracts/tokens/ERC721/BaseERC721.sol\";\n</code></pre> <p>The <code>BaseERC721</code> contract extends the basic <code>ERC721</code> contract with various extensions for controlling a max mint supply and setting royalities.</p> <p>View Contract </p>"},{"location":"tokens/ERC721/BaseERC721/#implementation","title":"Implementation","text":"<p>The <code>BaseERC721</code> contract requires the following variables to be passed into the constructor:</p> Name Type Description <code>_name</code> <code>string memory</code> Name of the collection. <code>_symbol</code> <code>string memory</code> Symbol for the token. <code>_baseURI</code> <code>string memory</code> The URI for the token metadata. <code>_baseURIExtension</code> <code>string memory</code> The extension to be appended to the tokenID when formin the URI. <code>_maxSupply</code> <code>uint256</code> The maximum amount of tokens that can be minted. Setting this to 0 will allow for an unlimited supply. <code>_royaltyReceiver</code> <code>address</code> The address that should receive royalties for secondary sales. <code>_royaltyFeeNumerator</code> <code>uint96</code> The fee percentage to charge. The denominator is fixed to 10000, so setting to 750 would make the fee 7.5% (750/10000)."},{"location":"tokens/ERC721/BaseERC721/#usage","title":"Usage","text":"pause <pre><code>function pause() external onlyOwner\n</code></pre> <ul> <li>Pause the contract, and disable token transfers.</li> </ul> unpause <pre><code>function unpause() external onlyOwner\n</code></pre> <ul> <li>Unpause the contract, and allow token transfers.</li> </ul> setBaseURI <pre><code>function setBaseURI(string memory _baseURI, string memory _baseURIExtension) external onlyOwner\n</code></pre> <ul> <li>Set the base URI and extension for the token metadata.</li> <li><code>_baseURI</code>: The URI that will get prepended to the token ID.</li> <li><code>_baseURIExtension</code>: The extension that will get appended to the token ID.</li> </ul> setDefaultRoyalty <pre><code>function setDefaultRoyalty(address _receiver, uint96 _feeNumerator) external onlyOwner\n</code></pre> <ul> <li>Set the default royalty to be received for secondary sales. The denominator used for the numerator to form the fraction is 10000.</li> <li><code>_receiver</code>: The address that should receive the royalties.</li> <li><code>_feeNumerator</code>: The fee percentage to charge. The denominator is fixed to 10000, so setting the <code>_feeNumerator</code> to 750 would make the fee 7.5% (750/10000).</li> </ul> deleteDefaultRoyalty <pre><code>function deleteDefaultRoyalty() external onlyOwner\n</code></pre> <ul> <li>Delete the default royalty (i.e. reset back to 0% with no receiver).</li> </ul> setTokenRoyalty <pre><code>function setTokenRoyalty(uint256 _tokenId, address _receiver, uint96 _feeNumerator) external onlyOwner\n</code></pre> <ul> <li>Set royalties on a per token basis.</li> <li><code>_tokenId</code>: The token to set the royalties for.</li> <li><code>_receiver</code>: The address that should receive the royalties.</li> <li><code>_feeNumerator</code>: The fee percentage to charge. The denominator is fixed to 10000, so setting the <code>_feeNumerator</code> to 750 would make the fee 7.5% (750/10000).</li> </ul> resetTokenRoyalty <pre><code>function resetTokenRoyalty(uint256 _tokenId) external onlyOwner\n</code></pre> <ul> <li>Reset the royalties for a specific token (i.e. reset back to 0% with no receiver).</li> <li><code>_tokenId</code>: The token ID to reset royalties for.</li> </ul> tokenURI <pre><code>function tokenURI(uint256 _tokenId) public view virtual override returns (string memory)\n</code></pre> <ul> <li>Get the URI to the metadata for a specific token. Format is <code>[baseURI][tokenId][baseURIExtension]</code>.</li> <li><code>_tokenId</code>: The token ID to get the metadata URI for.</li> <li>Returns the metadata URI for a specific token.</li> </ul> _baseMint <pre><code>function _baseMint(address _to, uint256 _tokenId) internal\n</code></pre> <ul> <li>Mint the supplied token Id to the given address, up to the <code>MAX_SUPPLY</code> (which may be unlimited).</li> <li><code>_to</code>: The address to mint tokens to.</li> <li><code>_tokenId</code>: Token ID to mint.</li> </ul>"},{"location":"tokens/ERC721/BaseERC721/#example","title":"Example","text":"<pre><code>pragma solidity ^0.8.19;\n\nimport \"@wraith-works/contracts/tokens/ERC721/BaseERC721.sol\";\n\ncontract MyNFT is BaseERC721 {\n    constructor()\n        BaseERC721(\n            \"MyNFT\",\n            \"NFT\",\n            \"https://example.com/\",\n            \".json\",\n            3333,\n            0x14c84F8aBaD55F074Ef18BEb46A7cbede6a17B10,\n            750\n        )\n    {}\n}\n</code></pre>"},{"location":"tokens/ERC721/IStakingRewardCalculator/","title":"IStakingRewardCalculator","text":"<pre><code>import \"@wraith-works/contracts/tokens/ERC721/IStakingRewardCalculator.sol\";\n</code></pre> <p>The <code>IStakingRewardCalculator</code> provides an interface that can be implemented for calculating extra staking rewards.</p> <p>View Contract </p>"},{"location":"tokens/ERC721/IStakingRewardCalculator/#usage","title":"Usage","text":"calculateStakingReward <pre><code>function calculateStakingReward(address _owner, uint256 _tokenId, uint256 _reward) external view returns (uint256);\n</code></pre> <ul> <li>Calculate the staking reward based on the base reward and a potential multiplier. Calculation defined by implementer.</li> <li><code>_owner</code>: The owner of the token.</li> <li><code>_tokenId</code>: The ID of the token.</li> <li><code>_reward</code>: The base reward.</li> <li>Returns the new reward.</li> </ul>"},{"location":"tokens/ERC721/IStakingRewardCalculator/#example","title":"Example","text":"<p>See TokenIdStakingRewardCalculator for an example.</p>"},{"location":"tokens/ERC721/MintableERC721/","title":"MintableERC721","text":"<pre><code>import \"@wraith-works/contracts/tokens/ERC721/MintableERC721.sol\";\n</code></pre> <p>The <code>MintableERC721</code> provides a multi-stage mintable version of AutoIncrementERC721.</p> <p>View Contract </p>"},{"location":"tokens/ERC721/MintableERC721/#inherits-from","title":"Inherits From","text":"<ul> <li>AutoIncrementERC721</li> </ul>"},{"location":"tokens/ERC721/MintableERC721/#usage","title":"Usage","text":"addMintStage <pre><code>function addMintStage(\n    uint256 _price,\n    uint256 _maxPerWallet,\n    uint256 _maxPerMint,\n    bytes32 _merkleRoot\n) public onlyOwner returns (uint256)\n</code></pre> <ul> <li>Add a new mint stage.</li> <li><code>_price</code>: The price of this mint stage.</li> <li><code>_maxPerWallet</code>: Maximum mints per wallet.</li> <li><code>_maxPerMint</code>: Maximum mints per mint function call.</li> <li><code>_merkleRoot</code>: The merkle root for this mint stage. Set to 0x0 for an open mint.</li> <li>Returns the index of the added mint stage.</li> </ul> removeMintStage <pre><code>function removeMintStage(uint256 _idx) public onlyOwner\n</code></pre> <ul> <li>Remove the mint stage at the given index. Resets the active mint stage and sets the mint to inactive.</li> <li><code>_idx</code>: The index of the mint stage.</li> </ul> updateMintStagePricing <pre><code>function updateMintStagePricing(uint256 _idx, uint256 _price) public onlyOwner\n</code></pre> <ul> <li>Update the mint stage price.</li> <li><code>_idx</code>: The index of the mint stage.</li> <li><code>_price</code>: The price of the mint.</li> </ul> updateMintStageMaxPer <pre><code>function updateMintStageMaxPer(uint256 _idx, uint256 _maxPerWallet, uint256 _maxPerMint) public onlyOwner\n</code></pre> <ul> <li>Update the mint stage max per wallet, and max per mint.</li> <li><code>_idx</code>: The index of the mint stage.</li> <li><code>_maxPerWallet</code>: Max mints per wallet.</li> <li><code>_maxPerMint</code>: Max mints per mint function call.</li> </ul> updateMintStageMerkleRoot <pre><code>function updateMintStageMerkleRoot(uint256 _idx, bytes32 _merkleRoot) public onlyOwner\n</code></pre> <ul> <li>Update the mint stage merkle root.</li> <li><code>_idx</code>: The index of the mint stage.</li> <li><code>_merkleRoot</code>: The merkle root. Set to 0x0 for an open mint.</li> </ul> setMintActive <pre><code>function setMintActive(bool _mintActive) public onlyOwner\n</code></pre> <ul> <li>Set mint to active or inactive.</li> <li><code>_mintActive</code>: True for active, false for inactive.</li> </ul> setActiveMintStage <pre><code>function setActiveMintStage(uint256 _idx) public onlyOwner\n</code></pre> <ul> <li>Set active mint stage index.</li> <li><code>_idx</code>: The index of the active mint stage.</li> </ul> setPaymentToken <pre><code>function setPaymentToken(address _paymentToken) public onlyOwner\n</code></pre> <ul> <li>Set the payment token address. Set to <code>address(0)</code> for native token payments.</li> <li><code>_paymentToken</code>: Payment token address.</li> </ul> withdrawAllNative <pre><code>function withdrawAllNative() external onlyOwner\n</code></pre> <ul> <li>Withdraw all native tokens to the owner.</li> </ul> withdrawAllTokens <pre><code>function withdrawAllTokens(address _tokenAddress) external onlyOwner\n</code></pre> <ul> <li>Withdraws all specified tokens to the owner.</li> <li><code>_tokenAddress</code>: Address of the token.</li> </ul> maximumAmountForOwner <pre><code>function maximumAmountForOwner(\n    address _owner,\n    bytes32[] calldata _merkleProof\n) public view returns (uint256)\n</code></pre> <ul> <li>Get the maximum mint amount for the given owner, in the current mint stage.</li> <li><code>_owner</code>: The owners address.</li> <li><code>_merkleProof</code>: The merkle proof to prove position in merkle tree.</li> <li>Returns the amount an owner can mint in the current mint stage.</li> </ul> mintPriceForAmount <pre><code>function mintPriceForAmount(\n    address _owner,\n    uint256 _amount,\n    bytes32[] calldata _merkleProof\n) public view returns (uint256)\n</code></pre> <ul> <li>Get the mint price for the given owner and amount, in the current mint stage.</li> <li><code>_owner</code>: The owners address.</li> <li><code>_amount</code>: The amount to calculate price on. Needs to be within allowed amount.</li> <li><code>_merkleProof</code>: The merkle proof to prove position in merkle tree.</li> <li>Returns the mint price for the given owner and amount.</li> </ul> mint <pre><code>function mint(uint256 _amount, bytes32[] calldata _merkleProof) public payable\n</code></pre> <ul> <li>Mint the given amount to the callers wallet.</li> <li><code>_amount</code>: The amount to mint.</li> <li><code>_merkleProof</code>: The merkle proof to prove position in merkle tree.</li> </ul>"},{"location":"tokens/ERC721/MintableERC721/#example","title":"Example","text":"<pre><code>pragma solidity ^0.8.19;\n\nimport \"@wraith-works/contracts/tokens/ERC721/MintableERC721.sol\";\n\ncontract MyMintableERC721 is MintableERC721 {\n    constructor(\n        uint256 _maxSupply\n    )\n        BaseERC721(\n            \"Example\",\n            \"EXAMPLE\",\n            \"https://example.com/\",\n            \".json\",\n            _maxSupply,\n            0x14c84F8aBaD55F074Ef18BEb46A7cbede6a17B10,\n            750\n        )\n        AutoIncrementERC721(1)\n    {\n        addMintStage(0, 2, 2, 0x0); // Whitelist\n        addMintStage(15 * 10**18, 1, 1, 0x0); // Allowlist\n        addMintStage(25 * 10**18, 1, 1, 0x0); // Public\n    }\n}\n</code></pre>"},{"location":"tokens/ERC721/RevealableERC721/","title":"RevealableERC721","text":"<pre><code>import \"@wraith-works/contracts/tokens/ERC721/RevealableERC721.sol\";\n</code></pre> <p>The <code>RevealableERC721</code> contract provides reveal functionality to the BaseERC721 contract.</p> <p>View Contract </p>"},{"location":"tokens/ERC721/RevealableERC721/#implementation","title":"Implementation","text":"<p>The <code>RevealableERC721</code> contract requires the following variables to be passed into the constructor:</p> Name Type Description <code>_prerevealURI</code> <code>string memory</code> The URI for the prereveal metadata."},{"location":"tokens/ERC721/RevealableERC721/#inherits-from","title":"Inherits From","text":"<ul> <li>BaseERC721</li> </ul>"},{"location":"tokens/ERC721/RevealableERC721/#usage","title":"Usage","text":"setPrerevealURI <pre><code>function setPrerevealURI(string memory _prerevealURI) external onlyOwner\n</code></pre> <ul> <li>Set the URI for te preveal metadata.</li> <li><code>_prerevealURI</code>: The URI for the prereveal metadata.</li> </ul> toggleReveal <pre><code>function toggleReveal() external onlyOwner\n</code></pre> <ul> <li>Toggle the reveal. When <code>revealed</code> is <code>true</code>, the token specific metadata URI will be returned.</li> </ul> tokenURI <pre><code>function tokenURI(uint256 _tokenId) public view virtual override returns (string memory)\n</code></pre> <ul> <li>Get either the prereveal metadata, or the token specific metadata.</li> <li><code>_tokenId</code>: The token ID to get the metadata URI for.</li> <li>Returns the metadata URI for a specific token or the prereveal metadata URI, depending on the state of <code>revealed</code>.</li> </ul>"},{"location":"tokens/ERC721/RevealableERC721/#example","title":"Example","text":"<pre><code>pragma solidity ^0.8.19;\n\nimport \"@wraith-works/contracts/tokens/ERC721/RevealableERC721.sol\";\n\ncontract MyRevealable is RevealableERC721 {\n    constructor()\n        BaseERC721(\n            \"MyRevealable\",\n            \"REVEALABLE\",\n            \"https://example.com/\",\n            \".json\",\n            3333,\n            0x14c84F8aBaD55F074Ef18BEb46A7cbede6a17B10,\n            750\n        )\n        RevealableERC721(\"https://example.com/prereveal.json\")\n    {}\n\n    function tokenURI(uint256 _tokenId) public view override(BaseERC721, RevealableERC721) returns (string memory) {\n        return RevealableERC721.tokenURI(_tokenId);\n    }\n}\n</code></pre>"},{"location":"tokens/ERC721/StakingPoolsERC721/","title":"StakingPoolsERC721","text":"<pre><code>import \"@wraith-works/contracts/tokens/ERC721/StakingPoolsERC721.sol\";\n</code></pre> <p>The <code>StakingPoolsERC721</code> provides staking pools for ERC721 tokens, earning a ERC20 reward token while staked.</p> <p>View Contract </p>"},{"location":"tokens/ERC721/StakingPoolsERC721/#implementation","title":"Implementation","text":"<p>The <code>StakingPoolsERC721</code> contract requires the following variables to be passed into the constructor:</p> Name Type Description <code>_stakingToken</code> <code>address</code> The address of the ERC721 token that can be staked in the contract. <code>_rewardToken</code> <code>address</code> The address of the ERC20 token to be rewarded for staking."},{"location":"tokens/ERC721/StakingPoolsERC721/#usage","title":"Usage","text":"pause <pre><code>function pause() external onlyOwner\n</code></pre> <ul> <li>Pause the contract, and disable staking.</li> </ul> unpause <pre><code>function unpause() external onlyOwner\n</code></pre> <ul> <li>Unpause the contract, and allow staking.</li> </ul> setStakingToken <pre><code>function setStakingToken(address _stakingToken) external onlyOwner\n</code></pre> <ul> <li>Set the address of the ERC721 token that can be staked in the contract.</li> <li><code>_stakingToken</code>: Address of the ERC721 token.</li> </ul> setRewardToken <pre><code>function setRewardToken(address _rewardToken) external onlyOwner\n</code></pre> <ul> <li>Set the address of the ERC20 token to be rewarded for staking.</li> <li><code>_receiver</code>: Address of the ERC20 token.</li> </ul> setStakingRewardCalculator <pre><code>function setStakingRewardCalculator(address _stakingRewardCalculator) external onlyOwner\n</code></pre> <ul> <li>Set the address of the IStakingRewardCalculator contract.</li> <li><code>_stakingRewardCalculator</code>: Address of the contract.</li> </ul> addStakingPool <pre><code>function addStakingPool(\n    bool _rewardWhileLocked,\n    uint256 _lockPeriod,\n    uint256 _reward\n) external onlyOwner returns (uint256)\n</code></pre> <ul> <li>Add a staking pool. The pool starts disabled.</li> <li><code>_rewardWhileLocked</code>: Reward tokens can be claimed during the lock period.</li> <li><code>_lockPeriod</code>: The lock period in seconds that the token will be locked.</li> <li><code>_reward</code>: The amount of the ERC20 token to give at the end of the lock period.</li> <li>Returns the index of the staking pool.</li> </ul> _addStakingPool <pre><code>function _addStakingPool(\n    bool _rewardWhileLocked,\n    uint256 _lockPeriod,\n    uint256 _reward\n) internal returns (uint256)\n</code></pre> <ul> <li>Add a staking pool. The pool starts disabled.</li> <li><code>_rewardWhileLocked</code>: Reward tokens can be claimed during the lock period.</li> <li><code>_lockPeriod</code>: The lock period in seconds that the token will be locked.</li> <li><code>_reward</code>: The amount of the ERC20 token to give at the end of the lock period.</li> <li>Returns the index of the staking pool.</li> </ul> activateStakingPool <pre><code>function activateStakingPool(uint256 _index) external onlyOwner\n</code></pre> <ul> <li>Activate the given staking pool. Cannot activate an invalidated pool.</li> <li><code>_index</code>: The index of the staking pool.</li> </ul> _activateStakingPool <pre><code>function _activateStakingPool(uint256 _index) internal\n</code></pre> <ul> <li>Activate the given staking pool. Cannot activate an invalidated pool.</li> <li><code>_index</code>: The index of the staking pool.</li> </ul> deactivateStakingPool <pre><code>function deactivateStakingPool(uint256 _index) external onlyOwner\n</code></pre> <ul> <li>Deactivate the given staking pool. No new tokens can be staked in the pool, but existing tokens in the pool will continue to earn until unlocked.</li> <li><code>_index</code>: The index of the staking pool.</li> </ul> invalidateStakingPool <pre><code>function invalidateStakingPool(uint256 _index) external onlyOwner\n</code></pre> <ul> <li>Invalidate the staking pool. No new tokens can be staked in the pool, and all existing tokens will be immediately unlocked. Unclaimed tokens will be lost.</li> <li><code>_index</code>: The index of the staking pool.</li> </ul> stake <pre><code>function stake(uint256 _poolIndex, uint256[] calldata _tokenIds) external whenNotPaused\n</code></pre> <ul> <li>Stake the token Ids in the given staking pool.</li> <li><code>_poolIndex</code>: The index of the staking pool.</li> <li><code>_tokenIds</code>: The list of tokenIds to stake in the pool.</li> </ul> unstake <pre><code>function unstake() external whenNotPaused nonReentrant\n</code></pre> <ul> <li>Unstake all unlocked tokens for the caller, and pay out any unclaimed rewards.</li> </ul> claimRewards <pre><code>function claimRewards() external whenNotPaused nonReentrant\n</code></pre> <ul> <li>Claim any unclaimed rewards for the caller.</li> </ul> rewardsAvailable <pre><code>function rewardsAvailable(address _owner) external view returns (uint256)\n</code></pre> <ul> <li>Get balance of reward token available to claim by user.</li> <li><code>_owner</code>: The owner to check balance for.</li> <li>Returns the users reward balance.</li> </ul> stakingPoolCount <pre><code>function stakingPoolCount() external view returns (uint256)\n</code></pre> <ul> <li>Get the number of staking pools available.</li> <li>Returns the number of staking pools.</li> </ul> getStakedTokenIds <pre><code>function getStakedTokenIds(address _owner) external view returns (uint256[] memory)\n</code></pre> <ul> <li>Get a list of all staked token Ids for an owner.</li> <li><code>_owner</code>: The owners address.</li> <li>Returns a list of token Ids.</li> </ul> getLockedTokenIds <pre><code>function getLockedTokenIds(address _owner, uint256 _poolIndex) external view returns (uint256, uint256[] memory)\n</code></pre> <ul> <li>Get a list of all locked token Ids for an owner in a staking pool.</li> <li><code>_owner</code>: The owners address.</li> <li><code>_poolIndex</code>: The index of the staking pool.</li> <li>Returns the count of token Ids, and a list of token Ids.</li> </ul> getUnlockedTokenIds <pre><code>function getUnlockedTokenIds(address _owner) external view returns (uint256, uint256[] memory)\n</code></pre> <ul> <li>Get a list of all unlocked token Ids for an owner.</li> <li><code>_owner</code>: The owners address.</li> <li>Returns the count of token Ids, and a list of token Ids.</li> </ul> getStakedTokenBalance <pre><code>function getStakedTokenBalance(address _owner) external view returns (uint256)\n</code></pre> <ul> <li>Get the number of staked tokens by owner.</li> <li><code>_owner</code>: The owners address.</li> <li>Returns the number of tokens staked.</li> </ul> rewardsRatePerTimeUnit <pre><code>function rewardsRatePerTimeUnit(address _owner, uint256 _timeUnit) external view returns (uint256)\n</code></pre> <ul> <li>Calculate the current rewards rate for a user over a given amount of time.</li> <li><code>_owner</code>: The owner to calculate for.</li> <li><code>_timeUnit</code>: The time in seconds to calculate rewards over. i.e. 86400 seconds to calculate rewards per day.</li> <li>Returns the calculated rewards rate.</li> </ul>"},{"location":"tokens/ERC721/StakingPoolsERC721/#example","title":"Example","text":"<pre><code>pragma solidity ^0.8.19;\n\nimport \"@wraith-works/contracts/tokens/ERC721/StakingPoolsERC721.sol\";\n\ncontract MyStakingPools is StakingPoolsERC721 {\n    constructor(address _stakingToken, address _rewardToken) StakingPoolsERC721(_stakingToken, _rewardToken) {\n        _addStakingPool(true, 86400, 1 * 10**18);\n        _activateStakingPool(0);\n\n        _addStakingPool(true, 86400 * 7, 10 * 10**18);\n        _activateStakingPool(1);\n\n        _addStakingPool(true, 86400 * 30, 50 * 10**18);\n        _activateStakingPool(2);\n    }\n}\n</code></pre>"},{"location":"tokens/ERC721/TokenIdStakingRewardCalculator/","title":"TokenIdStakingRewardCalculator","text":"<pre><code>import \"@wraith-works/contracts/tokens/ERC721/TokenIdStakingRewardCalculator.sol\";\n</code></pre> <p>The <code>TokenIdStakingRewardCalculator</code> provides a mechanism for adding staking reward multipliers per token.</p> <p>View Contract </p>"},{"location":"tokens/ERC721/TokenIdStakingRewardCalculator/#inherits-from","title":"Inherits From","text":"<ul> <li>IStakingRewardCalculator</li> </ul>"},{"location":"tokens/ERC721/TokenIdStakingRewardCalculator/#usage","title":"Usage","text":"pause <pre><code>function pause() external onlyOwner\n</code></pre> <ul> <li>Pause the contract.</li> </ul> unpause <pre><code>function unpause() external onlyOwner\n</code></pre> <ul> <li>Unpause the contract.</li> </ul> setTokenMultipliers <pre><code>function setTokenMultipliers(uint256[] calldata _tokenIds, uint256[] calldata _multipliers) external onlyOwner\n</code></pre> <ul> <li>Set the multipliers for the given token IDs.</li> <li><code>_tokenIds</code>: The IDs of the tokens.</li> <li><code>_multipliers</code>: The reward multipliers.</li> </ul> _setTokenMultiplier <pre><code>function _setTokenMultiplier(uint256 _tokenId, uint256 _multiplier) internal\n</code></pre> <ul> <li>Set the multiplier for the given token ID.</li> <li><code>_tokenId</code>: The ID for the token.</li> <li><code>_multiplier</code>: The reward multiplier.</li> </ul> calculateStakingReward <pre><code>function calculateStakingReward(address _owner, uint256 _tokenId, uint256 _reward) external view returns (uint256);\n</code></pre> <ul> <li>See IStakingRewardCalculator.</li> </ul>"},{"location":"tokens/ERC721/TokenIdStakingRewardCalculator/#example","title":"Example","text":"<pre><code>pragma solidity ^0.8.19;\n\nimport \"@wraith-works/contracts/tokens/ERC721/TokenIdStakingRewardCalculator.sol\";\n\ncontract MyRewardCalculator is TokenIdStakingRewardCalculator {\n    constructor() {\n        // Set token ID 1 to a 1.5x multiplier.\n        _setTokenMultiplier(1, 15000000000000000000);\n    }\n}\n</code></pre>"}]}